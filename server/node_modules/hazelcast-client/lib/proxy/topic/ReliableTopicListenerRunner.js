"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LoggingService_1 = require("../../logging/LoggingService");
var TopicMessage_1 = require("./TopicMessage");
var ReliableTopicListenerRunner = (function () {
    function ReliableTopicListenerRunner(listenerId, listener, ringbuffer, batchSize, serializationService, proxy) {
        this.sequenceNumber = 0;
        this.cancelled = false;
        this.loggingService = LoggingService_1.LoggingService.getLoggingService();
        this.listenerId = listenerId;
        this.listener = listener;
        this.ringbuffer = ringbuffer;
        this.batchSize = batchSize;
        this.serializationService = serializationService;
        this.proxy = proxy;
    }
    ReliableTopicListenerRunner.prototype.next = function () {
        var _this = this;
        if (this.cancelled) {
            return;
        }
        this.ringbuffer.readMany(this.sequenceNumber, 1, this.batchSize).then(function (result) {
            if (!_this.cancelled) {
                result.forEach(function (raw) {
                    var msg = new TopicMessage_1.TopicMessage();
                    msg.messageObject = _this.serializationService.toObject(raw.payload);
                    msg.publisher = raw.publisherAddress;
                    msg.publishingTime = raw.publishTime;
                    setImmediate(_this.listener, msg);
                    _this.sequenceNumber++;
                });
                setImmediate(_this.next.bind(_this));
            }
        }).catch(function (e) {
            if (e.className === 'com.hazelcast.ringbuffer.StaleSequenceException') {
                _this.ringbuffer.headSequence().then(function (seq) {
                    var newSequence = seq.toNumber();
                    var message = 'Topic "' + _this.proxy.getName() + '" ran into a stale sequence. ' +
                        ' Jumping from old sequence ' + _this.sequenceNumber + ' to new sequence ' + newSequence;
                    _this.loggingService.warn('ReliableTopicListenerRunner', message);
                    _this.sequenceNumber = newSequence;
                    setImmediate(_this.next.bind(_this));
                });
                return;
            }
            var message = 'Listener of topic "' + _this.proxy.getName() + '" caught an exception, terminating listener';
            _this.loggingService.warn('ReliableTopicListenerRunner', message);
            _this.proxy.removeMessageListener(_this.listenerId);
        });
    };
    ReliableTopicListenerRunner.prototype.cancel = function () {
        this.cancelled = true;
    };
    return ReliableTopicListenerRunner;
}());
exports.ReliableTopicListenerRunner = ReliableTopicListenerRunner;
//# sourceMappingURL=ReliableTopicListenerRunner.js.map