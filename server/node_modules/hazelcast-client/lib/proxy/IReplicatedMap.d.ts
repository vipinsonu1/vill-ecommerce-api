/// <reference types="long" />
/// <reference types="bluebird" />
import * as Promise from 'bluebird';
import { DistributedObject } from '../DistributedObject';
import { Predicate } from '../core/Predicate';
import { IMapListener } from '../core/MapListener';
import Long = require('long');
import { ArrayComparator } from '../util/ArrayComparator';
export interface IReplicatedMap<K, V> extends DistributedObject {
    put(key: K, value: V, ttl: Long | number): Promise<V>;
    clear(): Promise<void>;
    get(key: K): Promise<V>;
    containsKey(key: K): Promise<boolean>;
    containsValue(value: V): Promise<boolean>;
    size(): Promise<number>;
    isEmpty(): Promise<boolean>;
    remove(key: K): Promise<V>;
    putAll(pairs: [K, V][]): Promise<void>;
    keySet(): Promise<K[]>;
    values(comparator?: ArrayComparator<V>): Promise<V[]>;
    entrySet(): Promise<[K, V][]>;
    addEntryListenerToKeyWithPredicate(listener: IMapListener<K, V>, key: K, predicate: Predicate): Promise<string>;
    addEntryListenerWithPredicate(listener: IMapListener<K, V>, predicate: Predicate): Promise<string>;
    addEntryListenerToKey(listener: IMapListener<K, V>, key: K): Promise<string>;
    addEntryListener(listener: IMapListener<K, V>): Promise<string>;
    removeEntryListener(listenerId: string): Promise<boolean>;
}
