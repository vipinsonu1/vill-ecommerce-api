/// <reference types="bluebird" />
import * as Promise from 'bluebird';
import { DistributedObject } from '../DistributedObject';
import HazelcastClient from '../HazelcastClient';
declare class ProxyManager {
    MAP_SERVICE: string;
    SET_SERVICE: string;
    LOCK_SERVICE: string;
    QUEUE_SERVICE: string;
    LIST_SERVICE: string;
    MULTIMAP_SERVICE: string;
    RINGBUFFER_SERVICE: string;
    REPLICATEDMAP_SERVICE: string;
    SEMAPHORE_SERVICE: string;
    ATOMICLONG_SERVICE: string;
    service: any;
    private proxies;
    private client;
    private logger;
    private readonly invocationTimeoutMillis;
    private readonly invocationRetryPauseMillis;
    constructor(client: HazelcastClient);
    getOrCreateProxy(name: string, serviceName: string, createAtServer?: boolean): DistributedObject;
    private createProxy(proxyObject);
    private findNextAddress();
    private initializeProxy(proxyObject, promise, deadline);
    destroyProxy(name: string, serviceName: string): Promise<void>;
    addDistributedObjectListener(listenerFunc: Function): Promise<string>;
    removeDistributedObjectListener(listenerId: string): Promise<boolean>;
    private createDistributedObjectListener();
}
export = ProxyManager;
