import { Data } from '../serialization/Data';
export interface KeyStateMarker {
    markIfUnmarked(key: Data): boolean;
    unmarkIfMarked(key: Data): boolean;
    removeIfMarked(key: Data): boolean;
    unmarkForcibly(key: Data): void;
    unmarkAllForcibly(): void;
}
export declare class KeyStateMarkerImpl implements KeyStateMarker {
    private marks;
    constructor(markerCount: number);
    markIfUnmarked(key: Data): boolean;
    unmarkIfMarked(key: Data): boolean;
    removeIfMarked(key: Data): boolean;
    unmarkForcibly(key: Data): void;
    unmarkAllForcibly(): void;
    private compareAndSet(key, expect, update);
    private getSlot(data);
    private hashToIndex(hash, len);
}
export declare class TrueKeyStateMarker implements KeyStateMarker {
    static INSTANCE: TrueKeyStateMarker;
    private constructor();
    markIfUnmarked(key: Data): boolean;
    unmarkIfMarked(key: Data): boolean;
    removeIfMarked(key: Data): boolean;
    unmarkForcibly(key: Data): void;
    unmarkAllForcibly(): void;
}
