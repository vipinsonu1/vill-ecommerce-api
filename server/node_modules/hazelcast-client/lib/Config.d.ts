import Address = require('./Address');
import { IdentifiedDataSerializableFactory, PortableFactory } from './serialization/Serializable';
import { TopicOverloadPolicy } from './proxy/topic/TopicOverloadPolicy';
export declare class GroupConfig {
    name: string;
    password: string;
}
export declare class SocketOptions {
}
export interface SSLOptions {
    pfx?: any;
    key?: any;
    passphrase?: string;
    cert?: any;
    ca?: any;
    rejectUnauthorized?: boolean;
    servername?: string;
}
export declare class ClientNetworkConfig {
    addresses: Address[];
    connectionAttemptLimit: number;
    connectionAttemptPeriod: number;
    connectionTimeout: number;
    redoOperation: boolean;
    smartRouting: boolean;
    socketOptions: SocketOptions;
    sslOptions: SSLOptions;
    constructor();
}
export declare class SerializationConfig {
    defaultNumberType: string;
    isBigEndian: boolean;
    dataSerializableFactories: {
        [id: number]: IdentifiedDataSerializableFactory;
    };
    portableFactories: {
        [id: number]: PortableFactory;
    };
    portableVersion: number;
    customSerializers: any[];
    globalSerializer: any;
}
export declare class ReliableTopicConfig {
    readBatchSize: number;
    overloadPolicy: TopicOverloadPolicy;
}
export declare class GlobalSerializerConfig {
}
export interface LifecycleListener {
    (event: string): void;
}
export declare enum InMemoryFormat {
    OBJECT = 0,
    BINARY = 1,
}
export declare enum EvictionPolicy {
    NONE = 0,
    LRU = 1,
    LFU = 2,
    RANDOM = 3,
}
export declare class NearCacheConfig {
    name: string;
    invalidateOnChange: boolean;
    maxIdleSeconds: number;
    inMemoryFormat: InMemoryFormat;
    timeToLiveSeconds: number;
    evictionPolicy: EvictionPolicy;
    evictionMaxSize: number;
    evictionSamplingCount: number;
    evictionSamplingPoolSize: number;
    toString(): string;
}
export declare class ListenerConfig {
    lifecycle: Function[];
    addLifecycleListener(listener: Function): void;
    getLifecycleListeners(): Function[];
}
export declare class ClientConfig {
    instanceName: string;
    properties: any;
    groupConfig: GroupConfig;
    networkConfig: ClientNetworkConfig;
    customCredentials: any;
    listeners: ListenerConfig;
    serializationConfig: SerializationConfig;
    reliableTopicConfigs: any;
    nearCacheConfigs: {
        [name: string]: NearCacheConfig;
    };
}
