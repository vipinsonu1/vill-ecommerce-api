"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var ClientMessageType_1 = require("./ClientMessageType");
var REQUEST_TYPE = ClientMessageType_1.ClientMessageType.CLIENT_ADDDISTRIBUTEDOBJECTLISTENER;
var RESPONSE_TYPE = 104;
var RETRYABLE = false;
var ClientAddDistributedObjectListenerCodec = (function () {
    function ClientAddDistributedObjectListenerCodec() {
    }
    ClientAddDistributedObjectListenerCodec.calculateSize = function (localOnly) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.BOOLEAN_SIZE_IN_BYTES;
        return dataSize;
    };
    ClientAddDistributedObjectListenerCodec.encodeRequest = function (localOnly) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(localOnly));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendBoolean(localOnly);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    ClientAddDistributedObjectListenerCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readString();
        return parameters;
    };
    ClientAddDistributedObjectListenerCodec.handle = function (clientMessage, handleEventDistributedobject, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var messageType = clientMessage.getMessageType();
        if (messageType === BitsUtil_1.BitsUtil.EVENT_DISTRIBUTEDOBJECT && handleEventDistributedobject !== null) {
            var messageFinished = false;
            var name = undefined;
            if (!messageFinished) {
                name = clientMessage.readString();
            }
            var serviceName = undefined;
            if (!messageFinished) {
                serviceName = clientMessage.readString();
            }
            var eventType = undefined;
            if (!messageFinished) {
                eventType = clientMessage.readString();
            }
            handleEventDistributedobject(name, serviceName, eventType);
        }
    };
    return ClientAddDistributedObjectListenerCodec;
}());
exports.ClientAddDistributedObjectListenerCodec = ClientAddDistributedObjectListenerCodec;
//# sourceMappingURL=ClientAddDistributedObjectListenerCodec.js.map