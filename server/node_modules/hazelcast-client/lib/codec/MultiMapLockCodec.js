"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MultiMapMessageType_1 = require("./MultiMapMessageType");
var REQUEST_TYPE = MultiMapMessageType_1.MultiMapMessageType.MULTIMAP_LOCK;
var RESPONSE_TYPE = 100;
var RETRYABLE = true;
var MultiMapLockCodec = (function () {
    function MultiMapLockCodec() {
    }
    MultiMapLockCodec.calculateSize = function (name, key, threadId, ttl, referenceId) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.calculateSizeData(key);
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        return dataSize;
    };
    MultiMapLockCodec.encodeRequest = function (name, key, threadId, ttl, referenceId) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, key, threadId, ttl, referenceId));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendData(key);
        clientMessage.appendLong(threadId);
        clientMessage.appendLong(ttl);
        clientMessage.appendLong(referenceId);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    return MultiMapLockCodec;
}());
exports.MultiMapLockCodec = MultiMapLockCodec;
//# sourceMappingURL=MultiMapLockCodec.js.map