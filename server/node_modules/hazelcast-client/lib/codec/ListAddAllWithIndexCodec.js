"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var ListMessageType_1 = require("./ListMessageType");
var REQUEST_TYPE = ListMessageType_1.ListMessageType.LIST_ADDALLWITHINDEX;
var RESPONSE_TYPE = 101;
var RETRYABLE = false;
var ListAddAllWithIndexCodec = (function () {
    function ListAddAllWithIndexCodec() {
    }
    ListAddAllWithIndexCodec.calculateSize = function (name, index, valueList) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        valueList.forEach(function (valueListItem) {
            dataSize += BitsUtil_1.BitsUtil.calculateSizeData(valueListItem);
        });
        return dataSize;
    };
    ListAddAllWithIndexCodec.encodeRequest = function (name, index, valueList) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, index, valueList));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendInt32(index);
        clientMessage.appendInt32(valueList.length);
        valueList.forEach(function (valueListItem) {
            clientMessage.appendData(valueListItem);
        });
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    ListAddAllWithIndexCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readBoolean();
        return parameters;
    };
    return ListAddAllWithIndexCodec;
}());
exports.ListAddAllWithIndexCodec = ListAddAllWithIndexCodec;
//# sourceMappingURL=ListAddAllWithIndexCodec.js.map