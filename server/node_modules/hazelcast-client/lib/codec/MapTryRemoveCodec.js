"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MapMessageType_1 = require("./MapMessageType");
var REQUEST_TYPE = MapMessageType_1.MapMessageType.MAP_TRYREMOVE;
var RESPONSE_TYPE = 101;
var RETRYABLE = false;
var MapTryRemoveCodec = (function () {
    function MapTryRemoveCodec() {
    }
    MapTryRemoveCodec.calculateSize = function (name, key, threadId, timeout) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.calculateSizeData(key);
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        return dataSize;
    };
    MapTryRemoveCodec.encodeRequest = function (name, key, threadId, timeout) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, key, threadId, timeout));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendData(key);
        clientMessage.appendLong(threadId);
        clientMessage.appendLong(timeout);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    MapTryRemoveCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readBoolean();
        return parameters;
    };
    return MapTryRemoveCodec;
}());
exports.MapTryRemoveCodec = MapTryRemoveCodec;
//# sourceMappingURL=MapTryRemoveCodec.js.map