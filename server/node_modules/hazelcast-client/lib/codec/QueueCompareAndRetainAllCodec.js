"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var QueueMessageType_1 = require("./QueueMessageType");
var REQUEST_TYPE = QueueMessageType_1.QueueMessageType.QUEUE_COMPAREANDRETAINALL;
var RESPONSE_TYPE = 101;
var RETRYABLE = false;
var QueueCompareAndRetainAllCodec = (function () {
    function QueueCompareAndRetainAllCodec() {
    }
    QueueCompareAndRetainAllCodec.calculateSize = function (name, dataList) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        dataList.forEach(function (dataListItem) {
            dataSize += BitsUtil_1.BitsUtil.calculateSizeData(dataListItem);
        });
        return dataSize;
    };
    QueueCompareAndRetainAllCodec.encodeRequest = function (name, dataList) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, dataList));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendInt32(dataList.length);
        dataList.forEach(function (dataListItem) {
            clientMessage.appendData(dataListItem);
        });
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    QueueCompareAndRetainAllCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readBoolean();
        return parameters;
    };
    return QueueCompareAndRetainAllCodec;
}());
exports.QueueCompareAndRetainAllCodec = QueueCompareAndRetainAllCodec;
//# sourceMappingURL=QueueCompareAndRetainAllCodec.js.map