"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MultiMapMessageType_1 = require("./MultiMapMessageType");
var REQUEST_TYPE = MultiMapMessageType_1.MultiMapMessageType.MULTIMAP_REMOVE;
var RESPONSE_TYPE = 106;
var RETRYABLE = false;
var MultiMapRemoveCodec = (function () {
    function MultiMapRemoveCodec() {
    }
    MultiMapRemoveCodec.calculateSize = function (name, key, threadId) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.calculateSizeData(key);
        dataSize += BitsUtil_1.BitsUtil.LONG_SIZE_IN_BYTES;
        return dataSize;
    };
    MultiMapRemoveCodec.encodeRequest = function (name, key, threadId) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, key, threadId));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendData(key);
        clientMessage.appendLong(threadId);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    MultiMapRemoveCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        var responseSize = clientMessage.readInt32();
        var response = [];
        for (var responseIndex = 0; responseIndex < responseSize; responseIndex++) {
            var responseItem;
            responseItem = clientMessage.readData();
            response.push(responseItem);
        }
        parameters['response'] = response;
        return parameters;
    };
    return MultiMapRemoveCodec;
}());
exports.MultiMapRemoveCodec = MultiMapRemoveCodec;
//# sourceMappingURL=MultiMapRemoveCodec.js.map