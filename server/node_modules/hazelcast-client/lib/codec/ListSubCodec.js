"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var ListMessageType_1 = require("./ListMessageType");
var REQUEST_TYPE = ListMessageType_1.ListMessageType.LIST_SUB;
var RESPONSE_TYPE = 106;
var RETRYABLE = true;
var ListSubCodec = (function () {
    function ListSubCodec() {
    }
    ListSubCodec.calculateSize = function (name, from, to) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        return dataSize;
    };
    ListSubCodec.encodeRequest = function (name, from, to) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, from, to));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendInt32(from);
        clientMessage.appendInt32(to);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    ListSubCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        var responseSize = clientMessage.readInt32();
        var response = [];
        for (var responseIndex = 0; responseIndex < responseSize; responseIndex++) {
            var responseItem;
            responseItem = clientMessage.readData();
            response.push(responseItem);
        }
        parameters['response'] = response;
        return parameters;
    };
    return ListSubCodec;
}());
exports.ListSubCodec = ListSubCodec;
//# sourceMappingURL=ListSubCodec.js.map