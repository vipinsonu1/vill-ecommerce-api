"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MultiMapMessageType_1 = require("./MultiMapMessageType");
var REQUEST_TYPE = MultiMapMessageType_1.MultiMapMessageType.MULTIMAP_ADDENTRYLISTENERTOKEY;
var RESPONSE_TYPE = 104;
var RETRYABLE = false;
var MultiMapAddEntryListenerToKeyCodec = (function () {
    function MultiMapAddEntryListenerToKeyCodec() {
    }
    MultiMapAddEntryListenerToKeyCodec.calculateSize = function (name, key, includeValue, localOnly) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.calculateSizeData(key);
        dataSize += BitsUtil_1.BitsUtil.BOOLEAN_SIZE_IN_BYTES;
        dataSize += BitsUtil_1.BitsUtil.BOOLEAN_SIZE_IN_BYTES;
        return dataSize;
    };
    MultiMapAddEntryListenerToKeyCodec.encodeRequest = function (name, key, includeValue, localOnly) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, key, includeValue, localOnly));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendData(key);
        clientMessage.appendBoolean(includeValue);
        clientMessage.appendBoolean(localOnly);
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    MultiMapAddEntryListenerToKeyCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        parameters['response'] = clientMessage.readString();
        return parameters;
    };
    MultiMapAddEntryListenerToKeyCodec.handle = function (clientMessage, handleEventEntry, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var messageType = clientMessage.getMessageType();
        if (messageType === BitsUtil_1.BitsUtil.EVENT_ENTRY && handleEventEntry !== null) {
            var messageFinished = false;
            var key = undefined;
            if (!messageFinished) {
                if (clientMessage.readBoolean() !== true) {
                    key = clientMessage.readData();
                }
            }
            var value = undefined;
            if (!messageFinished) {
                if (clientMessage.readBoolean() !== true) {
                    value = clientMessage.readData();
                }
            }
            var oldValue = undefined;
            if (!messageFinished) {
                if (clientMessage.readBoolean() !== true) {
                    oldValue = clientMessage.readData();
                }
            }
            var mergingValue = undefined;
            if (!messageFinished) {
                if (clientMessage.readBoolean() !== true) {
                    mergingValue = clientMessage.readData();
                }
            }
            var eventType = undefined;
            if (!messageFinished) {
                eventType = clientMessage.readInt32();
            }
            var uuid = undefined;
            if (!messageFinished) {
                uuid = clientMessage.readString();
            }
            var numberOfAffectedEntries = undefined;
            if (!messageFinished) {
                numberOfAffectedEntries = clientMessage.readInt32();
            }
            handleEventEntry(key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries);
        }
    };
    return MultiMapAddEntryListenerToKeyCodec;
}());
exports.MultiMapAddEntryListenerToKeyCodec = MultiMapAddEntryListenerToKeyCodec;
//# sourceMappingURL=MultiMapAddEntryListenerToKeyCodec.js.map