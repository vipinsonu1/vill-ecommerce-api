"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ClientMessage = require("../ClientMessage");
var BitsUtil_1 = require("../BitsUtil");
var MapMessageType_1 = require("./MapMessageType");
var REQUEST_TYPE = MapMessageType_1.MapMessageType.MAP_GETALL;
var RESPONSE_TYPE = 117;
var RETRYABLE = false;
var MapGetAllCodec = (function () {
    function MapGetAllCodec() {
    }
    MapGetAllCodec.calculateSize = function (name, keys) {
        var dataSize = 0;
        dataSize += BitsUtil_1.BitsUtil.calculateSizeString(name);
        dataSize += BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES;
        keys.forEach(function (keysItem) {
            dataSize += BitsUtil_1.BitsUtil.calculateSizeData(keysItem);
        });
        return dataSize;
    };
    MapGetAllCodec.encodeRequest = function (name, keys) {
        var clientMessage = ClientMessage.newClientMessage(this.calculateSize(name, keys));
        clientMessage.setMessageType(REQUEST_TYPE);
        clientMessage.setRetryable(RETRYABLE);
        clientMessage.appendString(name);
        clientMessage.appendInt32(keys.length);
        keys.forEach(function (keysItem) {
            clientMessage.appendData(keysItem);
        });
        clientMessage.updateFrameLength();
        return clientMessage;
    };
    MapGetAllCodec.decodeResponse = function (clientMessage, toObjectFunction) {
        if (toObjectFunction === void 0) { toObjectFunction = null; }
        var parameters = { 'response': null };
        var responseSize = clientMessage.readInt32();
        var response = [];
        for (var responseIndex = 0; responseIndex < responseSize; responseIndex++) {
            var responseItem;
            var responseItemKey;
            var responseItemVal;
            responseItemKey = clientMessage.readData();
            responseItemVal = clientMessage.readData();
            responseItem = [responseItemKey, responseItemVal];
            response.push(responseItem);
        }
        parameters['response'] = response;
        return parameters;
    };
    return MapGetAllCodec;
}());
exports.MapGetAllCodec = MapGetAllCodec;
//# sourceMappingURL=MapGetAllCodec.js.map