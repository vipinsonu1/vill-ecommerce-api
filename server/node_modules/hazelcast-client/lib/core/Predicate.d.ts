import { IdentifiedDataSerializable } from '../serialization/Serializable';
import { AndPredicate, FalsePredicate, BetweenPredicate, EqualPredicate, GreaterLessPredicate, LikePredicate, ILikePredicate, InPredicate, InstanceOfPredicate, NotEqualPredicate, NotPredicate, OrPredicate, RegexPredicate, TruePredicate, PagingPredicate } from '../serialization/DefaultPredicates';
import { Comparator } from './Comparator';
export interface Predicate extends IdentifiedDataSerializable {
}
export declare function sql(str: string): Predicate;
export declare function and(...predicates: Predicate[]): AndPredicate;
export declare function isBetween(field: string, from: any, to: any): BetweenPredicate;
export declare function isFalse(): FalsePredicate;
export declare function isEqualTo(field: string, value: any): EqualPredicate;
export declare function greaterThan(field: string, value: any): GreaterLessPredicate;
export declare function greaterEqual(field: string, value: any): GreaterLessPredicate;
export declare function lessThan(field: string, value: any): GreaterLessPredicate;
export declare function lessEqual(field: string, value: any): GreaterLessPredicate;
export declare function like(field: string, expr: string): LikePredicate;
export declare function ilike(field: string, expr: string): ILikePredicate;
export declare function inPredicate(field: string, ...values: any[]): InPredicate;
export declare function instanceOf(className: string): InstanceOfPredicate;
export declare function notEqual(field: string, value: any): NotEqualPredicate;
export declare function not(predic: Predicate): NotPredicate;
export declare function or(...predicates: Predicate[]): OrPredicate;
export declare function regex(field: string, reg: string): RegexPredicate;
export declare function truePredicate(): TruePredicate;
export declare function falsePredicate(): FalsePredicate;
export declare function paging(predicate: Predicate, pageSize: number, comparator?: Comparator): PagingPredicate;
export declare enum IterationType {
    KEY = 0,
    VALUE = 1,
    ENTRY = 2,
}
