"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Address = require("./Address");
var TopicOverloadPolicy_1 = require("./proxy/topic/TopicOverloadPolicy");
var DEFAULT_GROUP_NAME = 'dev';
var DEFAULT_GROUP_PASSWORD = 'dev-pass';
var GroupConfig = (function () {
    function GroupConfig() {
        this.name = DEFAULT_GROUP_NAME;
        this.password = DEFAULT_GROUP_PASSWORD;
    }
    return GroupConfig;
}());
exports.GroupConfig = GroupConfig;
var SocketOptions = (function () {
    function SocketOptions() {
    }
    return SocketOptions;
}());
exports.SocketOptions = SocketOptions;
var ClientNetworkConfig = (function () {
    function ClientNetworkConfig() {
        this.connectionAttemptLimit = 2;
        this.connectionAttemptPeriod = 3000;
        this.connectionTimeout = 5000;
        this.redoOperation = false;
        this.smartRouting = true;
        this.socketOptions = new SocketOptions();
        this.sslOptions = null;
        this.addresses = [
            new Address('localhost', 5701)
        ];
    }
    return ClientNetworkConfig;
}());
exports.ClientNetworkConfig = ClientNetworkConfig;
var SerializationConfig = (function () {
    function SerializationConfig() {
        this.defaultNumberType = 'double';
        this.isBigEndian = true;
        this.dataSerializableFactories = {};
        this.portableFactories = {};
        this.portableVersion = 0;
        this.customSerializers = [];
        this.globalSerializer = null;
    }
    return SerializationConfig;
}());
exports.SerializationConfig = SerializationConfig;
var ReliableTopicConfig = (function () {
    function ReliableTopicConfig() {
        this.readBatchSize = 25;
        this.overloadPolicy = TopicOverloadPolicy_1.TopicOverloadPolicy.BLOCK;
    }
    return ReliableTopicConfig;
}());
exports.ReliableTopicConfig = ReliableTopicConfig;
var GlobalSerializerConfig = (function () {
    function GlobalSerializerConfig() {
    }
    return GlobalSerializerConfig;
}());
exports.GlobalSerializerConfig = GlobalSerializerConfig;
var InMemoryFormat;
(function (InMemoryFormat) {
    InMemoryFormat[InMemoryFormat["OBJECT"] = 0] = "OBJECT";
    InMemoryFormat[InMemoryFormat["BINARY"] = 1] = "BINARY";
})(InMemoryFormat = exports.InMemoryFormat || (exports.InMemoryFormat = {}));
var EvictionPolicy;
(function (EvictionPolicy) {
    EvictionPolicy[EvictionPolicy["NONE"] = 0] = "NONE";
    EvictionPolicy[EvictionPolicy["LRU"] = 1] = "LRU";
    EvictionPolicy[EvictionPolicy["LFU"] = 2] = "LFU";
    EvictionPolicy[EvictionPolicy["RANDOM"] = 3] = "RANDOM";
})(EvictionPolicy = exports.EvictionPolicy || (exports.EvictionPolicy = {}));
var NearCacheConfig = (function () {
    function NearCacheConfig() {
        this.name = 'default';
        this.invalidateOnChange = true;
        this.maxIdleSeconds = 0;
        this.inMemoryFormat = InMemoryFormat.BINARY;
        this.timeToLiveSeconds = 0;
        this.evictionPolicy = EvictionPolicy.NONE;
        this.evictionMaxSize = Number.MAX_SAFE_INTEGER;
        this.evictionSamplingCount = 8;
        this.evictionSamplingPoolSize = 16;
    }
    NearCacheConfig.prototype.toString = function () {
        return 'NearCacheConfig[' +
            'name: ' + this.name + ', ' +
            'invalidateOnChange:' + this.invalidateOnChange + ', ' +
            'inMemoryFormat: ' + this.inMemoryFormat + ', ' +
            'ttl(sec): ' + this.timeToLiveSeconds + ', ' +
            'evictionPolicy: ' + this.evictionPolicy + ', ' +
            'evictionMaxSize: ' + this.evictionMaxSize + ', ' +
            'maxIdleSeconds: ' + this.maxIdleSeconds + ']';
    };
    return NearCacheConfig;
}());
exports.NearCacheConfig = NearCacheConfig;
var ListenerConfig = (function () {
    function ListenerConfig() {
        this.lifecycle = [];
    }
    ListenerConfig.prototype.addLifecycleListener = function (listener) {
        this.lifecycle.push(listener);
    };
    ListenerConfig.prototype.getLifecycleListeners = function () {
        return this.lifecycle;
    };
    return ListenerConfig;
}());
exports.ListenerConfig = ListenerConfig;
var ClientConfig = (function () {
    function ClientConfig() {
        this.properties = {
            'hazelcast.client.heartbeat.interval': 5000,
            'hazelcast.client.heartbeat.timeout': 60000,
            'hazelcast.client.invocation.retry.pause.millis': 1000,
            'hazelcast.client.invocation.timeout.millis': 120000
        };
        this.groupConfig = new GroupConfig();
        this.networkConfig = new ClientNetworkConfig();
        this.customCredentials = null;
        this.listeners = new ListenerConfig();
        this.serializationConfig = new SerializationConfig();
        this.reliableTopicConfigs = {
            'default': new ReliableTopicConfig()
        };
        this.nearCacheConfigs = {};
    }
    return ClientConfig;
}());
exports.ClientConfig = ClientConfig;
//# sourceMappingURL=Config.js.map