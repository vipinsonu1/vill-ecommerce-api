/// <reference types="node" />
/// <reference types="bluebird" />
import ClientConnection = require('./ClientConnection');
import * as Promise from 'bluebird';
import { Member } from '../core/Member';
import { EventEmitter } from 'events';
import { ClientInfo } from '../ClientInfo';
import HazelcastClient from '../HazelcastClient';
declare class ClusterService extends EventEmitter {
    ownerUuid: string;
    uuid: string;
    private knownAddresses;
    private members;
    private client;
    private ownerConnection;
    private logger;
    constructor(client: HazelcastClient);
    start(): Promise<void>;
    connectToCluster(): Promise<void>;
    getMembers(): Member[];
    getSize(): number;
    getClientInfo(): ClientInfo;
    private initHeartbeatListener();
    private initConnectionListener();
    private onConnectionClosed(connection);
    private onHeartbeatStopped(connection);
    private tryAddressIndex(index, attemptLimit, attemptPeriod, deferred);
    getOwnerConnection(): ClientConnection;
    initMemberShipListener(): Promise<void>;
    private handleMember(member, eventType);
    private handleMemberList(members);
    private handleMemberAttributeChange(uuid, key, operationType, value);
    private memberAdded(member);
    private memberRemoved(member);
}
export = ClusterService;
