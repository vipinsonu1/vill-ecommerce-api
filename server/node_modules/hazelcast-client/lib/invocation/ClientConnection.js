"use strict";
var net = require("net");
var tls = require("tls");
var Promise = require("bluebird");
var BitsUtil_1 = require("../BitsUtil");
var LoggingService_1 = require("../logging/LoggingService");
var Address = require("../Address");
var ClientConnection = (function () {
    function ClientConnection(connectionManager, address, clientNetworkConfig) {
        this.heartbeating = true;
        this.logging = LoggingService_1.LoggingService.getLoggingService();
        this.address = address;
        this.clientNetworkConfig = clientNetworkConfig;
        this.readBuffer = new Buffer(0);
        this.lastRead = 0;
        this.connectionManager = connectionManager;
        this.closedTime = 0;
    }
    ClientConnection.prototype.getLocalAddress = function () {
        return this.localAddress;
    };
    ClientConnection.prototype.getAddress = function () {
        return this.address;
    };
    ClientConnection.prototype.connect = function () {
        var _this = this;
        var ready = Promise.defer();
        var conCallback = function () {
            var buffer = new Buffer(3);
            buffer.write('CB2');
            _this.socket.write(buffer);
            ready.resolve(_this);
        };
        if (this.clientNetworkConfig.sslOptions) {
            var sslSocket = tls.connect(this.address.port, this.address.host, this.clientNetworkConfig.sslOptions, conCallback);
            this.localAddress = new Address(sslSocket.address().address, sslSocket.address().port);
            this.socket = sslSocket;
        }
        else {
            var netSocket = net.connect(this.address.port, this.address.host, conCallback);
            this.localAddress = new Address(netSocket.localAddress, netSocket.localPort);
            this.socket = netSocket;
        }
        this.socket.on('error', function (e) {
            _this.logging.warn('ClientConnection', 'Could not connect to address ' + _this.address.toString(), e);
            ready.reject(e);
            if (e.code === 'EPIPE' || e.code === 'ECONNRESET') {
                _this.connectionManager.destroyConnection(_this.address);
            }
        });
        return ready.promise;
    };
    ClientConnection.prototype.write = function (buffer, cb) {
        this.socket.write(buffer, 'utf8', cb);
    };
    ClientConnection.prototype.close = function () {
        this.socket.end();
        this.closedTime = Date.now();
    };
    ClientConnection.prototype.isAlive = function () {
        return this.closedTime === 0;
    };
    ClientConnection.prototype.toString = function () {
        return this.address.toString();
    };
    ClientConnection.prototype.registerResponseCallback = function (callback) {
        var _this = this;
        this.socket.on('data', function (buffer) {
            _this.lastRead = new Date().getTime();
            _this.readBuffer = Buffer.concat([_this.readBuffer, buffer], _this.readBuffer.length + buffer.length);
            while (_this.readBuffer.length >= BitsUtil_1.BitsUtil.INT_SIZE_IN_BYTES) {
                var frameSize = _this.readBuffer.readInt32LE(0);
                if (frameSize > _this.readBuffer.length) {
                    return;
                }
                var message = new Buffer(frameSize);
                _this.readBuffer.copy(message, 0, 0, frameSize);
                _this.readBuffer = _this.readBuffer.slice(frameSize);
                callback(message);
            }
        });
    };
    return ClientConnection;
}());
module.exports = ClientConnection;
//# sourceMappingURL=ClientConnection.js.map